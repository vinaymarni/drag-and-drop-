{"version":3,"file":"ej2-react-treemap.es2015.js","sources":["../src/es6/treemap/levels-directive.js","../src/es6/treemap/colormapping-directive.js","../src/es6/treemap/treemap.component.js"],"sourcesContent":["import { ComplexBase } from '@syncfusion/ej2-react-base';\n/**\n * `LevelsDirective` directive represent a levels of the react treemap.\n * It must be contained in a TreeMap component(`TreeMapComponent`).\n * ```tsx\n * <TreeMapComponent>\n * <LevelsDirective>\n * <LevelDirective></LevelDirective>\n * </LevelsDirective>\n * </TreeMapComponent>\n * ```\n */\nexport class LevelDirective extends ComplexBase {\n}\nLevelDirective.moduleName = 'level';\nexport class LevelsDirective extends ComplexBase {\n}\nLevelsDirective.propertyName = 'levels';\nLevelsDirective.moduleName = 'levels';\n","import { ComplexBase } from '@syncfusion/ej2-react-base';\nexport class ColorMappingDirective extends ComplexBase {\n}\nColorMappingDirective.moduleName = 'colorMapping';\nexport class ColorMappingsDirective extends ComplexBase {\n}\nColorMappingsDirective.propertyName = 'colorMapping';\nColorMappingsDirective.moduleName = 'colorMappings';\n","import * as React from 'react';\nimport { TreeMap } from '@syncfusion/ej2-treemap';\nimport { ComponentBase, applyMixins } from '@syncfusion/ej2-react-base';\n/**\n * Represents react TreeMap Component\n * ```tsx\n * <TreeMapComponent></TreeMapComponent>\n * ```\n */\nexport class TreeMapComponent extends TreeMap {\n    constructor(props) {\n        super(props);\n        this.initRenderCalled = false;\n        this.checkInjectedModules = true;\n        this.directivekeys = { 'levels': { 'level': { 'colorMappings': 'colorMapping' } } };\n        this.immediateRender = false;\n        this.portals = [];\n    }\n    render() {\n        if (((this.element && !this.initRenderCalled) || this.refreshing) && !this.isReactForeceUpdate) {\n            super.render();\n            this.initRenderCalled = true;\n        }\n        else {\n            return React.createElement('div', this.getDefaultAttributes(), [].concat(this.props.children, this.portals));\n        }\n    }\n}\napplyMixins(TreeMapComponent, [ComponentBase, React.Component]);\n"],"names":["React.createElement","React.Component"],"mappings":";;;;AACA;;;;;;;;;;;AAWA,AAAO,MAAM,cAAc,SAAS,WAAW,CAAC;CAC/C;AACD,cAAc,CAAC,UAAU,GAAG,OAAO,CAAC;AACpC,AAAO,MAAM,eAAe,SAAS,WAAW,CAAC;CAChD;AACD,eAAe,CAAC,YAAY,GAAG,QAAQ,CAAC;AACxC,eAAe,CAAC,UAAU,GAAG,QAAQ,CAAC;;ACjB/B,MAAM,qBAAqB,SAAS,WAAW,CAAC;CACtD;AACD,qBAAqB,CAAC,UAAU,GAAG,cAAc,CAAC;AAClD,AAAO,MAAM,sBAAsB,SAAS,WAAW,CAAC;CACvD;AACD,sBAAsB,CAAC,YAAY,GAAG,cAAc,CAAC;AACrD,sBAAsB,CAAC,UAAU,GAAG,eAAe,CAAC;;ACJpD;;;;;;AAMA,AAAO,MAAM,gBAAgB,SAAS,OAAO,CAAC;IAC1C,WAAW,CAAC,KAAK,EAAE;QACf,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC9B,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;QACjC,IAAI,CAAC,aAAa,GAAG,EAAE,QAAQ,EAAE,EAAE,OAAO,EAAE,EAAE,eAAe,EAAE,cAAc,EAAE,EAAE,EAAE,CAAC;QACpF,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;QAC7B,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;KACrB;IACD,MAAM,GAAG;QACL,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,gBAAgB,KAAK,IAAI,CAAC,UAAU,KAAK,CAAC,IAAI,CAAC,mBAAmB,EAAE;YAC5F,KAAK,CAAC,MAAM,EAAE,CAAC;YACf,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;SAChC;aACI;YACD,OAAOA,aAAmB,CAAC,KAAK,EAAE,IAAI,CAAC,oBAAoB,EAAE,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;SAChH;KACJ;CACJ;AACD,WAAW,CAAC,gBAAgB,EAAE,CAAC,aAAa,EAAEC,SAAe,CAAC,CAAC,CAAC;;;;;;"}